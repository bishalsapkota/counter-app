{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","console","log","react_default","a","createElement","className","Counter","prevProps","prevState","counter","value","this","props","_this","getBadgeClasses","formatCount","onClick","onIncrement","onDecrement","disabled","getDisableAttr","onDelete","id","classes","Component","Counters","_this$props","onReset","counters","map","components_counter","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleIncrement","toConsumableArray","index","indexOf","objectSpread","setState","handleReset","c","handleDecrement","handleDelete","counterId","filter","Fragment","react_router_dom","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c78b0245.chunk.js","sourcesContent":["import React from \"react\";\n\n// Stateless Functional Component\n\nconst NavBar = ({ totalCounters }) => {\n  console.log(\"NavBar - Rendered\");\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"container\">\n        <a className=\"navbar-brand\">\n          Navbar{\" \"}\n          <span className=\"badge badge-pill badge-secondary\">\n            {totalCounters}\n          </span>\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  /*constructor() {\n    super();\n    this.handleIncrement = this.handleIncrement.bind(this);\n  }*/\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevProps\", prevProps);\n    console.log(\"prevState\", prevState);\n    if (prevProps.counter.value !== this.props.counter.value) {\n      // Ajax call and get new data from the server\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Counter - Unmount\");\n  }\n\n  render() {\n    console.log(\"Counter - Rendered\");\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDecrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm m-2\"\n          disabled={this.getDisableAttr()}\n        >\n          Decrement\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getDisableAttr() {\n    let disabled = true;\n    const { value } = this.props.counter;\n    return value === 0 ? disabled : false;\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    console.log(\"Counters - Rendered\");\n    const {\n      onReset,\n      counters,\n      onDelete,\n      onIncrement,\n      onDecrement\n    } = this.props;\n    return (\n      <div>\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        {counters.map(counter => (\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            onDecrement={onDecrement}\n            counter={counter}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  constructor(props) {\n    super(props);\n    console.log(\"App- Constructor\");\n  }\n\n  componentDidMount() {\n    console.log(\"App - Mounted\");\n  }\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value--;\n    this.setState({ counters });\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n  render() {\n    console.log(\"App - Rendered\");\n    return (\n      <React.Fragment>\n        <Router>\n          <NavBar\n            totalCounters={this.state.counters.filter(c => c.value > 0).length}\n          />\n          <main className=\"container\">\n            <Counters\n              counters={this.state.counters}\n              onReset={this.handleReset}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n          </main>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}